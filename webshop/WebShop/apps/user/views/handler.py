from django.conf import settings
from WebShop.apps.contrib.decorator import json

from WebShop.apps.user.models import Profile, Address, APPROVALWHOLESALETOKEN, REGISTERNEWTOKEN

from django.contrib.auth.models import User
from WebShop.apps.user.user_roles import    NORM_ROLE
from WebShop.utils import mail

from django.contrib import auth
from django.shortcuts import render_to_response
from django.template import RequestContext, Context
from django.utils.translation import gettext_lazy as _


#===============================================================================
# TODO : How to Merge Carts? How to retrieve previous session? when anon user has a new session :/
#===============================================================================
@json
def rlogin(request):
    '''
    Login method call for AJAX
    '''
    map = {}
    zip = False
    email = request.POST.get('email', '')
    password = request.POST.get('password', '')
    user = auth.authenticate(email=email, password=password)

    if user is None:
        user = auth.authenticate(username=email, password=password)
        zip = True

    if user is not None:
        if user.is_active:
            auth.login(request, user)
            if (request.session.get('cart', None)):
                request.session['cart'].initUser(user)
            request.session['zip'] = zip      
            map['result'] = True
        else:
            map['result'] = False
            map['error'] = str(_('Sorry, please activate your account.'))
    else:
        map['result'] = False
        map['error'] = str(_('Sorry, please check your email and password.'))
    return map


def approve(request, token):
    '''
    Activate user from url: http://host/user/activate/${code}/
    The code is generated by _make_username method.
    '''

    user = auth.authenticate(token=token, role = APPROVALWHOLESALETOKEN)
    if(user):
        profile = user.get_profile()
        profile.role = NORM_ROLE
        profile.save()
        user.message_set.create(message=str(_('You have been approved for Wholesale access, enjoy your shopping!')))        
    else:
        message = _('This Approval Code is invalid, maybe you already approved this user?')


    approved_users = User.objects.filter(profile__role='K').order_by('id')
    
    profiles = dict([(p.user_id, p) for p in Profile.objects.filter(user__in = approved_users)])
    address = dict([(a.user_id, a) for a in Address.objects.filter(user__in=approved_users, type='billing')])

    for a in approved_users:
        a.profile = profiles.get(a.id, False)
        a.address = address.get(a.id, False)
    
    return render_to_response('user/approved.html', locals(), context_instance=RequestContext(request))

def deny(request, token):
    '''
    Activate user from url: http://host/user/activate/${code}/
    The code is generated by _make_username method.
    '''
    user = auth.authenticate(token=token, role = APPROVALWHOLESALETOKEN)
    if(user):
        user.message_set.create(message=str(_('Sorry, we could not approve your Wholesale Access request, please call us or contact us by email to clarify.')))
    else:
        message = _('This Approval Code is invalid, maybe you already denied this request?')
    return render_to_response('user/message.html', locals(), context_instance=RequestContext(request))

def orderFreeCatalog(request):
    if request.method == 'GET':
        form = OrderFreeCatalogForm()
    if request.method == 'POST':
        form = OrderFreeCatalogForm(request.POST.copy())
        if form.is_valid():
            c = Context({'form': form,
                         'user': request.user,})
            mail.create_mail("%s Order Free Catalog" % settigs.EMAIL_SUBJECT_PREFIX, settings.SERVER_EMAIL, settings.ORDER_MAIL, 'orderFreeCatalog', c)
            return render_to_response('user/orderFreeCatalogDone.html', locals(), context_instance=RequestContext(request))
        else:
            return render_to_response('user/orderFreeCatalog.html', locals(), context_instance=RequestContext(request))
    return render_to_response('user/orderFreeCatalog.html', locals(), context_instance=RequestContext(request))